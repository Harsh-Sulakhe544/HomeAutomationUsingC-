HOME AUTOMATION C++ CODE USING ESP32-CHIP 

#include "RMaker.h"
#include "WiFi.h"
#include "WiFiProv.h"
#include <IRremote.h>
#include <DHT.h> 
#include <SimpleTimer.h>
#include <AceButton.h>
using namespace ace_button;

const char *service_name = "PROV_1234RB8";
const char *pop = "12345RB8";


// define the Chip Id
uint32_t espChipId = 0;

// define the Node Name or uniquely identify device for ESP-RainMaker
char nodeName[] = "ESP32_Relay_8B";

// define the Device Names , These arrays are used to store the names of individual devices (presumably 
// switches) that are controlled by the ESP32 in the home automation project. which helps for ESP-RainMaker
// to uniquely identify each Switches separately when used with Relay 

char deviceName_1[] = "Switch1";
char deviceName_2[] = "Switch2";
char deviceName_3[] = "Switch3";
char deviceName_4[] = "Switch4";
char deviceName_5[] = "Switch5";
char deviceName_6[] = "Switch6";
char deviceName_7[] = "Switch7";
char deviceName_8[] = "Switch8";

//Update the HEX code of IR Remote buttons 0x<HEX CODE>
#define IR_Button_1   0x80BF49B6
#define IR_Button_2   0x80BFC936
#define IR_Button_3   0x80BF33CC
#define IR_Button_4   0x80BF718E
#define IR_Button_5   0x80BFF10E
#define IR_Button_6   0x80BF13EC
#define IR_Button_7   0x80BF51AE
#define IR_Button_8   0x80BFD12E
#define IR_All_Off    0x80BF3BC4


/* define the GPIO connected with Relays and switches uint8_t =>unisgned integer data-type , helps to store only numbers from 0-255  , if 256 
then 256 => 0 , if 300 => 1*256 + 44  => ans is 44 wrapped by uint8_t  */

// D=> Digital pin for ESP-32 
static uint8_t RelayPin1 = 23;  //D23
static uint8_t RelayPin2 = 22;  //D22
static uint8_t RelayPin3 = 21;  //D21
static uint8_t RelayPin4 = 19;  //D19
static uint8_t RelayPin5 = 18;  //D18
static uint8_t RelayPin6 = 5;   //D5
static uint8_t RelayPin7 = 25;  //D25
static uint8_t RelayPin8 = 26;  //D26

// to read the states of the switches , whether these are pressed or not 
static uint8_t SwitchPin1 = 13;  //D13
static uint8_t SwitchPin2 = 12;  //D12
static uint8_t SwitchPin3 = 14;  //D14
static uint8_t SwitchPin4 = 27;  //D27
static uint8_t SwitchPin5 = 33;  //D33
static uint8_t SwitchPin6 = 32;  //D32
static uint8_t SwitchPin7 = 15;  //D15
static uint8_t SwitchPin8 = 4;   //D4

/* wifiLed: This variable is assigned the value 2, which corresponds to digital pin D2. This pin is often used to connect an LED that 
indicates the status of the WiFi connection. For example, it may blink to show that the ESP32 is trying to connect to the WiFi network.

gpio_reset: This variable is assigned the value 0. It is used to specify the pin (BOOT button) that can be pressed to reset the WiFi  
 connection. When this button is pressed, it triggers a reset of the ESP32's WiFi module.

IR_RECV_PIN: This variable is assigned the value 35, corresponding to digital pin D35. It is the pin to which the IR (Infrared) receiver is 
connected. This pin is used to receive signals from an infrared remote control.

DHTPIN: This variable is assigned the value 16, corresponding to digital pin D16. It is the pin to which the DHT (Digital Humidity and 
Temperature) sensor is connected. This sensor can measure temperature and humidity.

LDR_PIN: This variable is assigned the value 34, corresponding to digital pin D34. It is the pin to which the Light-Dependent Resistor (LDR) 
is connected. The LDR's resistance changes with light intensity, allowing the ESP32 to measure the ambient light level.

why LDR_pin ? Light-Dependent Resistor (LDR): An LDR is a type of resistor whose resistance changes with the ambient light level. As the 
light falling on the LDR increases, its resistance decreases, and vice versa. This property makes it useful for detecting changes in light 
intensity.
uses : Automatic Lighting Control, Energy Savings(day and night) */

static uint8_t wifiLed      = 2;  // D2
static uint8_t gpio_reset   = 0;  // Press BOOT for reset WiFi
static uint8_t IR_RECV_PIN  = 35; // D35 (IR receiver pin)
static uint8_t DHTPIN       = 16; // RX2  pin connected with DHT
static uint8_t LDR_PIN      = 34; // D34  pin connected with LDR

/* Variable for reading pin status, currently all are in OFF state */
bool toggleState_1 = LOW; //Define integer to remember the toggle state for relay 1
bool toggleState_2 = LOW; //Define integer to remember the toggle state for relay 2
bool toggleState_3 = LOW; //Define integer to remember the toggle state for relay 3
bool toggleState_4 = LOW; //Define integer to remember the toggle state for relay 4
bool toggleState_5 = LOW; //Define integer to remember the toggle state for relay 5
bool toggleState_6 = LOW; //Define integer to remember the toggle state for relay 6
bool toggleState_7 = LOW; //Define integer to remember the toggle state for relay 7
bool toggleState_8 = LOW; //Define integer to remember the toggle state for relay 8

// set the temp, humidity(from a DHT Sensor) , ldrval to 0 
float temperature1 = 0;
float humidity1   = 0;
float ldrVal  = 0;

// creating objects(dht, irrecv, results, Timer) to interact with different sensors and modules 
DHT dht(DHTPIN, DHT11); // pin is DHTPIN and type of sensor is DHT11
IRrecv irrecv(IR_RECV_PIN);
decode_results results; // decoding infrared signals recieved by ir sensor
SimpleTimer Timer; // to handle callback(when time expires )

/* setting up configurations and instances for eight buttons using the AceButton library. This library is 
commonly used for handling button inputs in Arduino/ESP-32 projects. Each ButtonConfig is a configuration 
structure for a button, and each AceButton instance represents an individual button. */

ButtonConfig config1;
AceButton button1(&config1);
ButtonConfig config2;
AceButton button2(&config2);
ButtonConfig config3;
AceButton button3(&config3);
ButtonConfig config4;
AceButton button4(&config4);
ButtonConfig config5;
AceButton button5(&config5);
ButtonConfig config6;
AceButton button6(&config6);
ButtonConfig config7;
AceButton button7(&config7);
ButtonConfig config8;
AceButton button8(&config8);

/* AceButton*: A pointer to the AceButton instance that triggered the event.
declaring eight functions, each corresponding to handling events for one of the eight buttons. These 
functions likely define what should happen when a particular event occurs for a specific button. */

void handleEvent1(AceButton*, uint8_t, uint8_t);
void handleEvent2(AceButton*, uint8_t, uint8_t);
void handleEvent3(AceButton*, uint8_t, uint8_t);
void handleEvent4(AceButton*, uint8_t, uint8_t);
void handleEvent5(AceButton*, uint8_t, uint8_t);
void handleEvent6(AceButton*, uint8_t, uint8_t);
void handleEvent7(AceButton*, uint8_t, uint8_t);
void handleEvent8(AceButton*, uint8_t, uint8_t);

/*The framework provides some standard device types like switch, lightbulb, fan, temperature sensor.
"static" cuz we want them to stay till the end of our program - they get executed first  , 

creating instances of a class named Switch. Each instance corresponds to a switch in your home automation 
project. These switches are associated with specific relay pins (RelayPin1 to RelayPin8).
*/

static Switch my_switch1(deviceName_1, &RelayPin1);
static Switch my_switch2(deviceName_2, &RelayPin2);
static Switch my_switch3(deviceName_3, &RelayPin3);
static Switch my_switch4(deviceName_4, &RelayPin4);
static Switch my_switch5(deviceName_5, &RelayPin5);
static Switch my_switch6(deviceName_6, &RelayPin6);
static Switch my_switch7(deviceName_7, &RelayPin7);
static Switch my_switch8(deviceName_8, &RelayPin8);

// create a TemperatureSensor instances and  name of the instances are Temperature, Humidity, LDR

static TemperatureSensor temperature("Temperature");
static TemperatureSensor humidity("Humidity");
static TemperatureSensor ldr("LDR");


/* functions and terminologies used in below function =>  sysProvEvent() :
conditional compilation - #if , #else , whether target is an ESP-32 or not , 
ARDUINO_EVENT_PROV_START => ARDUINO_EVENT_PROV_START is an event identifier that indicates the start of the 
provisioning process. In the context of the ESP32 and Arduino framework, provisioning typically refers to the 
configuration of a device with necessary settings (such as Wi-Fi credentials) to connect to a network.

ARDUINO_EVENT_WIFI_STA_CONNECTED => to check wifi of ESP-32 is connected or not 

why printQr() and Serial.printf() , why Serial , why digitalWrite() ????

Serial.printf(): Serial refers to the serial communication interface of the microcontroller (e.g., ESP32).
it will print to the console : => 
Provisioning Started with name "PROV_1234RB8" and PoP "12345RB8" on BLE

printQr() =>QR codes can encode information such as service names, proof of possession, and provisioning 
details. The QR code is likely intended for easy configuration using a mobile app. By scanning the QR code, a 
user or another device can quickly obtain the necessary information for provisioning.

digitalWrite(): => This function is used to control a digital output pin, and it's often employed to turn an 
LED or any other digital component on or off. digitalWrite(wifiLed, true); sets the pin connected to wifiLed 
to a HIGH state, turning ON the associated LED.

Example Scenario:
Imagine you have an ESP32-based device that needs to be configured for Wi-Fi using a mobile app.
*/

void sysProvEvent(arduino_event_t *sys_event)
{
    switch (sys_event->event_id) {      
        case ARDUINO_EVENT_PROV_START:
#if CONFIG_IDF_TARGET_ESP32
        Serial.printf("\nProvisioning Started with name \"%s\" and PoP \"%s\" on BLE\n", service_name, pop);
        printQR(service_name, pop, "ble");
#else
        Serial.printf("\nProvisioning Started with name \"%s\" and PoP \"%s\" on SoftAP\n", service_name, pop);
        printQR(service_name, pop, "softap");
#endif        
        break;
        case ARDUINO_EVENT_WIFI_STA_CONNECTED:
        Serial.printf("\nConnected to Wi-Fi!\n");
        digitalWrite(wifiLed, true);
        break;
    }
}

/*  In the context of the SimpleTimer library, a "callback" refers to a function that you want to be executed 
when a specific timer expires. By setting up a timer with a callback function, you are telling the program to 
execute that function after a certain amount of time has passed.

ternary condition => a > b ? a : b => if a > b = print a or print b , 
write 8 callbacks for checking "Powers" for each of the device and if not update-digitalWrite() */

void write_callback(Device *device, Param *param, const param_val_t val, void *priv_data, write_ctx_t *ctx)
{
  /* getDeviceName() => Retrieves the name of the device associated with the write event. 
  getParamName() => Retrieves the name of the parameter associated with the write event. */

    const char *device_name = device->getDeviceName(); 
    const char *param_name = param->getParamName();
    
    if(strcmp(device_name, deviceName_1) == 0) {
      
      Serial.printf("Lightbulb = %s\n", val.val.b? "true" : "false");

      /* val.val.b: The val object is of type param_val_t, and .val.b refers to the boolean value of the 
    parameter. This is used to determine whether the "Power" of the device is set to true or false. */

      if(strcmp(param_name, "Power") == 0) {
          Serial.printf("Received value = %s for %s - %s\n", val.val.b? "true" : "false", device_name, param_name);
        toggleState_1 = val.val.b;
        // if it is not on => on the relay-pin(HIGH) , but if it is already on then let relay-pin be off 
        (toggleState_1 == false) ? digitalWrite(RelayPin1, HIGH) : digitalWrite(RelayPin1, LOW);

        /*param is a object , and The updateAndReport() function is from the ESP RainMaker library. It is 
        used to update the parameter associated with a particular device on the ESP RainMaker cloud. */

        param->updateAndReport(val);
      }
      
    } else if(strcmp(device_name, deviceName_2) == 0) {
      
      Serial.printf("Switch value = %s\n", val.val.b? "true" : "false");

      if(strcmp(param_name, "Power") == 0) {
        Serial.printf("Received value = %s for %s - %s\n", val.val.b? "true" : "false", device_name, param_name);
        toggleState_2 = val.val.b;
        (toggleState_2 == false) ? digitalWrite(RelayPin2, HIGH) : digitalWrite(RelayPin2, LOW);
        param->updateAndReport(val);
      }
  
    } else if(strcmp(device_name, deviceName_3) == 0) {
      
      Serial.printf("Switch value = %s\n", val.val.b? "true" : "false");

      if(strcmp(param_name, "Power") == 0) {
        Serial.printf("Received value = %s for %s - %s\n", val.val.b? "true" : "false", device_name, param_name);
        toggleState_3 = val.val.b;
        (toggleState_3 == false) ? digitalWrite(RelayPin3, HIGH) : digitalWrite(RelayPin3, LOW);
        param->updateAndReport(val);
      }
  
    } else if(strcmp(device_name, deviceName_4) == 0) {
      
      Serial.printf("Switch value = %s\n", val.val.b? "true" : "false");

      if(strcmp(param_name, "Power") == 0) {
        Serial.printf("Received value = %s for %s - %s\n", val.val.b? "true" : "false", device_name, param_name);
        toggleState_4 = val.val.b;
        (toggleState_4 == false) ? digitalWrite(RelayPin4, HIGH) : digitalWrite(RelayPin4, LOW);
        param->updateAndReport(val);
      } 
       
    } else if(strcmp(device_name, deviceName_5) == 0) {
      
      Serial.printf("Lightbulb = %s\n", val.val.b? "true" : "false");
      
      if(strcmp(param_name, "Power") == 0) {
          Serial.printf("Received value = %s for %s - %s\n", val.val.b? "true" : "false", device_name, param_name);
        toggleState_5 = val.val.b;
        (toggleState_5 == false) ? digitalWrite(RelayPin5, HIGH) : digitalWrite(RelayPin5, LOW);
        param->updateAndReport(val);
      }
      
    } else if(strcmp(device_name, deviceName_6) == 0) {
      
      Serial.printf("Switch value = %s\n", val.val.b? "true" : "false");

      if(strcmp(param_name, "Power") == 0) {
        Serial.printf("Received value = %s for %s - %s\n", val.val.b? "true" : "false", device_name, param_name);
        toggleState_6 = val.val.b;
        (toggleState_6 == false) ? digitalWrite(RelayPin6, HIGH) : digitalWrite(RelayPin6, LOW);
        param->updateAndReport(val);
      }
  
    } else if(strcmp(device_name, deviceName_7) == 0) {
      
      Serial.printf("Switch value = %s\n", val.val.b? "true" : "false");

      if(strcmp(param_name, "Power") == 0) {
        Serial.printf("Received value = %s for %s - %s\n", val.val.b? "true" : "false", device_name, param_name);
        toggleState_7 = val.val.b;
        (toggleState_7 == false) ? digitalWrite(RelayPin7, HIGH) : digitalWrite(RelayPin7, LOW);
        param->updateAndReport(val);
      }
  
    } else if(strcmp(device_name, deviceName_8) == 0) {
      
      Serial.printf("Switch value = %s\n", val.val.b? "true" : "false");

      if(strcmp(param_name, "Power") == 0) {
        Serial.printf("Received value = %s for %s - %s\n", val.val.b? "true" : "false", device_name, param_name);
        toggleState_8 = val.val.b;
        (toggleState_8 == false) ? digitalWrite(RelayPin8, HIGH) : digitalWrite(RelayPin8, LOW);
        param->updateAndReport(val);
      }  
    } 
}

// if nan => Not A Number
void readSensor(){

  // Read LDR (Light Dependent Resistor) sensor value and print it 
  ldrVal = map(analogRead(LDR_PIN), 0, 4095, 10, 0);
  Serial.print("LDR - "); Serial.println(ldrVal);

  // Read data from DHT (DHT11) sensor
  float h = dht.readHumidity();
  float t = dht.readTemperature(); // or dht.readTemperature(true) for Fahrenheit
  
  // Check if the readings from the DHT sensor are valid using isnan()
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
  else {
    humidity1 = h;
    temperature1 = t;
    Serial.print("Temperature - "); Serial.println(t);
    Serial.print("Humidity - "); Serial.println(h);
  }  
}

/*sendSensor() function updates sensor readings by calling readSensor() and then reports these readings as 
parameters for the temperature, humidity, and LDR values using the respective objects (temperature, humidity, 
and ldr). */

void sendSensor()
{
  readSensor();
  temperature.updateAndReportParam("Temperature", temperature1);
  humidity.updateAndReportParam("Humidity", humidity1);
  ldr.updateAndReportParam("Temperature", ldrVal);
}

void ir_remote(){
  if (irrecv.decode(&results)) {
      
      switch(results.value){

          // Cases for different IR remote buttons

          case IR_Button_1: 
            // Toggle the state of RelayPin1 digitally 
            digitalWrite(RelayPin1, toggleState_1);
            // Update toggleState_1 and report the parameter
            toggleState_1 = !toggleState_1;
            
            /* ESP_RMAKER_DEF_POWER_NAME is a macro or constant that likely represents the default name 
            associated with the power parameter in the ESP Rainmaker library.By using such a constant, you 
            make your code more readable, maintainable, and less error-prone. If, in the future, the default 
            name for the power parameter changes in the ESP Rainmaker library, you would only need to update 
            it in one place (where the constant is defined) rather than throughout your entire code. */

            my_switch1.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_1);
            
            /* why delay(100) ??  => So, delay(100) means that the program will wait or pause for 100 
            milliseconds before proceeding to the next line of code. This delay is often used to stabilize or 
            debounce inputs, ensuring that the program doesn't respond too quickly to changes in input 
            states, especially in scenarios like button presses or remote control inputs.  */

            delay(100);            
            break;
          
          case IR_Button_2:  
            digitalWrite(RelayPin2, toggleState_2);
            toggleState_2 = !toggleState_2;
            my_switch2.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_2);
            delay(100);            
            break;
          
          case IR_Button_3:  
            digitalWrite(RelayPin3, toggleState_3);
            toggleState_3 = !toggleState_3;
            my_switch3.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_3);
            delay(100);            
            break;
          
          case IR_Button_4:  
            digitalWrite(RelayPin4, toggleState_4);
            toggleState_4 = !toggleState_4;
            my_switch4.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_4);
            delay(100);            
            break;
          
          case IR_Button_5:  
            digitalWrite(RelayPin5, toggleState_5);
            toggleState_5 = !toggleState_5;
            my_switch5.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_5);
            delay(100);            
            break;
          
          case IR_Button_6:  
            digitalWrite(RelayPin6, toggleState_6);
            toggleState_6 = !toggleState_6;
            my_switch6.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_6);
            delay(100);            
            break;
          
          case IR_Button_7:  
            digitalWrite(RelayPin7, toggleState_7);
            toggleState_7 = !toggleState_7;
            my_switch7.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_7);
            delay(100);            
            break;
          
          case IR_Button_8:  
            digitalWrite(RelayPin8, toggleState_8);
            toggleState_8 = !toggleState_8;
            my_switch8.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_8);
            delay(100);            
            break;
          
          case IR_All_Off:
          // Turn off all switches
            all_SwitchOff();  
            break;
          default : break;         
        }   
        //Serial.println(results.value, HEX);    
        irrecv.resume();   
  } 
}

/*The updateAndReportParam() function is a function from the ESP RainMaker library. It is used to update the 
parameter associated with a particular device on the ESP RainMaker cloud.*/

/* off all the switches , = 0(LOW) , digitalWrite(RelayPinX, HIGH);: Turn off the relay connected to the 
RelayPinX by setting its state to HIGH. This is often used in relay modules where a HIGH state corresponds to 
turning off the connected device. 

why not low ? ==> Relay modules are often designed so that the relay is activated (switches from the normally 
open (NO) to the normally closed (NC) position) when the control pin (connected to RelayPinX in your code) 
receives a HIGH signal. Conversely, when you set the control pin to LOW, the relay deactivates (switches back 
to the normally open position). */ 

void all_SwitchOff(){
  toggleState_1 = 0; digitalWrite(RelayPin1, HIGH); my_switch1.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_1); delay(100);
  toggleState_2 = 0; digitalWrite(RelayPin2, HIGH); my_switch2.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_2); delay(100);
  toggleState_3 = 0; digitalWrite(RelayPin3, HIGH); my_switch3.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_3); delay(100);
  toggleState_4 = 0; digitalWrite(RelayPin4, HIGH); my_switch4.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_4); delay(100);
  toggleState_5 = 0; digitalWrite(RelayPin5, HIGH); my_switch5.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_5); delay(100);
  toggleState_6 = 0; digitalWrite(RelayPin6, HIGH); my_switch6.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_6); delay(100);
  toggleState_7 = 0; digitalWrite(RelayPin7, HIGH); my_switch7.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_7); delay(100);
  toggleState_8 = 0; digitalWrite(RelayPin8, HIGH); my_switch8.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_8); delay(100);
}

void setup()
{
    //uint32_t espChipId = espespChipId;
    
    Serial.begin(115200);
    
    /* Set the Relays GPIOs as output mode  ==> This part of the code configures the GPIO pins connected to 
    the relay modules as output pins. These pins will be used to control the relays, turning them on or off */
    
    pinMode(RelayPin1, OUTPUT);
    pinMode(RelayPin2, OUTPUT);
    pinMode(RelayPin3, OUTPUT);
    pinMode(RelayPin4, OUTPUT);
    pinMode(RelayPin5, OUTPUT);
    pinMode(RelayPin6, OUTPUT);
    pinMode(RelayPin7, OUTPUT);
    pinMode(RelayPin8, OUTPUT);  
    pinMode(wifiLed, OUTPUT);
    
    /* Configure the input GPIOs  ==> "INPUT_PULLUP" option enables the internal pull-up resistors for these 
    pins. When a switch is not pressed, the input pin is pulled HIGH by the internal pull-up resistor. When 
    the switch is pressed, it connects the input pin to ground, pulling it LOW.
    The reason for using pull-up resistors is to avoid floating states when the switches are not actively 
    pressed. A pull-up resistor ensures a default HIGH state when the switch is open. When the switch is 
    pressed, it pulls the pin LOW, indicating a button press.*/

    pinMode(SwitchPin1, INPUT_PULLUP);
    pinMode(SwitchPin2, INPUT_PULLUP);
    pinMode(SwitchPin3, INPUT_PULLUP);
    pinMode(SwitchPin4, INPUT_PULLUP);
    pinMode(SwitchPin5, INPUT_PULLUP);
    pinMode(SwitchPin6, INPUT_PULLUP);
    pinMode(SwitchPin7, INPUT_PULLUP);
    pinMode(SwitchPin8, INPUT_PULLUP);
    pinMode(gpio_reset, INPUT);
    
    /* Write to the GPIOs the default state on booting => The ! (logical NOT) operation is used here to 
    invert the value of toggleState_X. If toggleState_X is true, then !toggleState_X will be false, and vice 
    versa. This inversion is likely used to ensure that the relays are initially set to the opposite state of 
    toggleState_X when the system boots up. */

    digitalWrite(RelayPin1, !toggleState_1);
    digitalWrite(RelayPin2, !toggleState_2);
    digitalWrite(RelayPin3, !toggleState_3);
    digitalWrite(RelayPin4, !toggleState_4);
    digitalWrite(RelayPin5, !toggleState_5);
    digitalWrite(RelayPin6, !toggleState_6);
    digitalWrite(RelayPin7, !toggleState_7);
    digitalWrite(RelayPin8, !toggleState_8);
    digitalWrite(wifiLed, LOW);

    /* This line enables the infrared (IR) sensor for receiving signals. The IR sensor is typically used for receiving remote control signals. */ below

    irrecv.enableIRIn();  
    dht.begin();    // Enabling DHT sensor

    /* lines set up event handlers for the buttons using the setEventHandler function. Each button is 
    associated with a specific event handler function (button1Handler, button2Handler, etc.). These event 
    handlers are likely to be called when the corresponding buttons are pressed. */

    config1.setEventHandler(button1Handler);
    config2.setEventHandler(button2Handler);
    config3.setEventHandler(button3Handler);
    config4.setEventHandler(button4Handler);
    config5.setEventHandler(button5Handler);
    config6.setEventHandler(button6Handler);
    config7.setEventHandler(button7Handler);
    config8.setEventHandler(button8Handler);
    
    /*  why init and addCb ??? ==> init initializes the buttons with their respective GPIO pins.
    addCb associates a callback function with each switch device to handle write operations.  */
    button1.init(SwitchPin1);
    button2.init(SwitchPin2);
    button3.init(SwitchPin3);
    button4.init(SwitchPin4);
    button5.init(SwitchPin5);
    button6.init(SwitchPin6);
    button7.init(SwitchPin7);
    button8.init(SwitchPin8);

    /* Node Initialization: Node my_node; declares a variable named my_node of type Node. This is essentially 
    creating an instance of the Node class.
    Association with ESP Rainmaker Framework: my_node = RMaker.initNode(nodeName); initializes my_node by 
    associating it with a device node in the ESP Rainmaker framework. The initNode function is used to 
    initialize a node with a specific name (nodeName in this case). The node name is likely used to uniquely 
    identify this device in the ESP Rainmaker ecosystem.*/

    Node my_node;    
    my_node = RMaker.initNode(nodeName);

    //Standard switch device
    my_switch1.addCb(write_callback);
    my_switch2.addCb(write_callback);
    my_switch3.addCb(write_callback);
    my_switch4.addCb(write_callback);
    my_switch5.addCb(write_callback);
    my_switch6.addCb(write_callback);
    my_switch7.addCb(write_callback);
    my_switch8.addCb(write_callback);

    //Add switch device to the node   
    my_node.addDevice(my_switch1);
    my_node.addDevice(my_switch2);
    my_node.addDevice(my_switch3);
    my_node.addDevice(my_switch4);
    my_node.addDevice(my_switch5);
    my_node.addDevice(my_switch6);
    my_node.addDevice(my_switch7);
    my_node.addDevice(my_switch8);
    my_node.addDevice(temperature);
    my_node.addDevice(humidity);
    my_node.addDevice(ldr);

    /* Typically, libraries like Ticker, SimpleTimer, or similar ones offer functions like setInterval() to 
    schedule tasks or functions to run at specified intervals. This is useful for tasks that need to be 
    performed periodically, such as reading sensors, updating device states, or sending data. */

    Timer.setInterval(2000); 

    /* RMaker.enableOTA(OTA_USING_PARAMS);: This line enables Over-The-Air (OTA) updates for your ESP32 
    device. It suggests that the device can receive firmware updates over the air. The argument 
    OTA_USING_PARAMS implies that the OTA feature uses parameters, which could mean that updates are managed 
    or triggered based on specific parameters. 
    
    enableTZService()  ==> By enabling this service, the device can handle time-related functionalities 
    accurately, such as scheduling events based on local time
    
    enableSchedule() => This line enables the scheduling feature in ESP RainMaker. With scheduling, you can 
    set up specific events or actions to occur at predefined times. This could include turning devices on or 
    off, adjusting settings, or triggering other actions based on a schedule.

    */
    //This is optional 
    RMaker.enableOTA(OTA_USING_PARAMS);
    //If you want to enable scheduling, set time zone for your region using setTimeZone(). 
    //The list of available values are provided here https://rainmaker.espressif.com/docs/time-service.html
    // RMaker.setTimeZone("Asia/Shanghai");
    // Alternatively, enable the Timezone service and let the phone apps set the appropriate timezone
    RMaker.enableTZService();
    RMaker.enableSchedule();

    /* Service Name ==> DISCUSSED FIRST BINARY RANDOM UNIQUE MAC-ADDRESS FOR EACH OF THE ESP-32 DEVICES 
    01110010 01110001 01001101 10000111  => ex mac ADDRESS
    01110010 01110001 01001101   => ex ESP32-ADDRESS (just fetch left to right 3 times )
    */
    for(int i=0; i<17; i=i+8) {
      espChipId |= ((ESP.getEfuseMac() >> (40 - i)) & 0xff) << i;
    }

    Serial.printf("\nChip ID:  %d Service Name: %s\n", espChipId, service_name);
    Serial.printf("\nStarting ESP-RainMaker\n");

    /* Start the ESP-RainMaker framework. This initializes and starts the RainMaker core, allowing the ESP32 
    to communicate with the RainMaker cloud and perform various device-related operations. */

    RMaker.start(); 

    /* execute only on esp-32 => For example, you might have code that is specific to the ESP32 and should 
    not be compiled when targeting other platforms. Using CONFIG_IDF_TARGET_ESP32 in conditional directives 
    (#if or #ifdef) allows you to write code that adapts to the specific requirements of the ESP32.
    
    The provisioning process is a mechanism to securely set up the initial configuration for the device, such as connecting it to a Wi-Fi network. The chosen scheme and security level dictate how the provisioning process is carried out.

    For ESP32, it begins BLE-based provisioning with specified parameters.
    For other platforms, it begins SoftAP-based provisioning.
     */

    WiFi.onEvent(sysProvEvent);
#if CONFIG_IDF_TARGET_ESP32
    WiFiProv.beginProvision(WIFI_PROV_SCHEME_BLE, WIFI_PROV_SCHEME_HANDLER_FREE_BTDM, WIFI_PROV_SECURITY_1, pop, service_name);
#else
    WiFiProv.beginProvision(WIFI_PROV_SCHEME_SOFTAP, WIFI_PROV_SCHEME_HANDLER_NONE, WIFI_PROV_SECURITY_1, pop, service_name);
#endif

  // initial power is OFF
    my_switch1.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, false);
    my_switch2.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, false);
    my_switch3.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, false);
    my_switch4.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, false);
    my_switch5.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, false);
    my_switch6.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, false);
    my_switch7.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, false);
    my_switch8.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, false);
}

void loop()
{
    /* Read GPIO0 external button to reset device => This part of the code is checking the state of an 
    external push button connected to the GPIO pin defined as gpio_reset. The purpose of this button is to 
    allow for various reset operations based on the duration it is pressed. 
    
    Depending on the duration of the button press, it performs different actions:
  If the button is pressed for more than 10 seconds, it performs a factory reset using RMakerFactoryReset(2).
  If the button is pressed for more than 3 seconds but less than 10, it resets the Wi-Fi configuration using RMakerWiFiReset(2).*/

    if(digitalRead(gpio_reset) == LOW) { //Push button pressed
        Serial.printf("Reset Button Pressed!\n");
        // Key debounce handling
        delay(100);
        int startTime = millis();
        while(digitalRead(gpio_reset) == LOW) delay(50);
        int endTime = millis();

        if ((endTime - startTime) > 10000) {
          // If key pressed for more than 10secs, reset all
          Serial.printf("Reset to factory.\n");
          RMakerFactoryReset(2);
        } else if ((endTime - startTime) > 3000) {
          Serial.printf("Reset Wi-Fi.\n");
          // If key pressed for more than 3secs, but less than 10, reset Wi-Fi
          RMakerWiFiReset(2);
        }
    }
    delay(100);

    // check if wifi is not connected , then wifiled - false , otherwise wifiled -> true
    if (WiFi.status() != WL_CONNECTED)
    {
      //Serial.println("WiFi Not Connected");
      digitalWrite(wifiLed, false);
    }
    else
    {
      //Serial.println("WiFi Connected");
      digitalWrite(wifiLed, true);
      if (Timer.isReady()) { 
        //Serial.println("Sending Sensor Data");
        sendSensor();
        Timer.reset();      // Reset a second timer
      }
    }

    ir_remote(); //IR remote Control

    // check() is a method to check the button state and trigger events accordingly.
    
    button1.check();
    button2.check();
    button3.check();
    button4.check();
    button5.check();
    button6.check();
    button7.check();
    button8.check();
}

/* This function is an event handler for the AceButton library. It will be called when events associated with 
 the button occur. => In summary, when button 1 is released, this event handler toggles the state of 
 RelayPin1, updates the switch state, and prints a debug statement. */

void button1Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  Serial.println("EVENT1");
  switch (eventType) {
    
    /* This case is triggered when the button is released. , why :: (scope resolution ) => Here, AceButton is 
    a class or namespace, and kEventReleased is a member (likely a constant) within that class or namespace. 
    The scope resolution operator is used to indicate that kEventReleased is a part of the AceButton class or 
    namespace. */

    case AceButton::kEventReleased:
      digitalWrite(RelayPin1, toggleState_1);
      toggleState_1 = !toggleState_1;
      my_switch1.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_1);
      break;
  }
}

// similar to all 8 buttons 
void button2Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  Serial.println("EVENT2");
  switch (eventType) {
    case AceButton::kEventReleased:
      digitalWrite(RelayPin2, toggleState_2);
      toggleState_2 = !toggleState_2;
      my_switch2.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_2);
      break;
  }
}
void button3Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  Serial.println("EVENT3");
  switch (eventType) {
    case AceButton::kEventReleased:
      digitalWrite(RelayPin3, toggleState_3);
      toggleState_3 = !toggleState_3;
      my_switch3.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_3);
      break;
  }
}
void button4Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  Serial.println("EVENT4");
  switch (eventType) {
    case AceButton::kEventReleased:
      digitalWrite(RelayPin4, toggleState_4);
      toggleState_4 = !toggleState_4;
      my_switch4.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_4);
      break;
  }
}
void button5Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  Serial.println("EVENT5");
  switch (eventType) {
    case AceButton::kEventReleased:
      digitalWrite(RelayPin5, toggleState_5);
      toggleState_5 = !toggleState_5;
      my_switch5.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_5);
      break;
  }
}
void button6Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  Serial.println("EVENT6");
  switch (eventType) {
    case AceButton::kEventReleased:
      digitalWrite(RelayPin6, toggleState_6);
      toggleState_6 = !toggleState_6;
      my_switch6.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_6);
      break;
  }
}
void button7Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  Serial.println("EVENT7");
  switch (eventType) {
    case AceButton::kEventReleased:
      digitalWrite(RelayPin7, toggleState_7);
      toggleState_7 = !toggleState_7;
      my_switch7.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_7);
      break;
  }
}
void button8Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {
  Serial.println("EVENT8");
  switch (eventType) {
    case AceButton::kEventReleased:
      digitalWrite(RelayPin8, toggleState_8);
      toggleState_8 = !toggleState_8;
      my_switch8.updateAndReportParam(ESP_RMAKER_DEF_POWER_NAME, toggleState_8);
      break;
  }
}